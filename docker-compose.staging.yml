version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_ENVIRONMENT=staging
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_ENVIRONMENT=staging
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-research-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env.staging
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/ai_research_agent_staging
    volumes:
      - backend_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-research-network
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_DATABASE=ai_research_agent_staging
    volumes:
      - mongodb_data:/data/db
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ai-research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - ai-research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
  redis_data:
  backend_logs:

networks:
  ai-research-network:
    driver: bridge